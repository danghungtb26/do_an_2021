/*!
 * animsition v4.0.2
 * A simple and easy jQuery plugin for CSS animated page transitions.
 * http://blivesta.github.io/animsition
 * License : MIT
 * Author : blivesta (http://blivesta.com/)
 */
!(function (t) {
  typeof define === 'function' && define.amd
    ? define(['jquery'], t)
    : typeof exports === 'object'
    ? (module.exports = t(require('jquery')))
    : t(jQuery)
})(function (t) {
  const n = 'animsition'
  var i = {
    init(a) {
      ;(a = t.extend(
        {
          inClass: 'fade-in',
          outClass: 'fade-out',
          inDuration: 1500,
          outDuration: 800,
          linkElement: '.animsition-link',
          loading: !0,
          loadingParentElement: 'body',
          loadingClass: 'animsition-loading',
          loadingInner: '',
          timeout: !1,
          timeoutCountdown: 5e3,
          onLoadEvent: !0,
          browser: ['animation-duration', '-webkit-animation-duration'],
          overlay: !1,
          overlayClass: 'animsition-overlay-slide',
          overlayParentElement: 'body',
          transition(t) {
            window.location.href = t
          },
        },
        a
      )),
        (i.settings = {
          timer: !1,
          data: {
            inClass: 'animsition-in-class',
            inDuration: 'animsition-in-duration',
            outClass: 'animsition-out-class',
            outDuration: 'animsition-out-duration',
            overlay: 'animsition-overlay',
          },
          events: {
            inStart: 'animsition.inStart',
            inEnd: 'animsition.inEnd',
            outStart: 'animsition.outStart',
            outEnd: 'animsition.outEnd',
          },
        })
      const o = i.supportCheck.call(this, a)
      if (!o && a.browser.length > 0 && (!o || !this.length))
        return (
          'console' in window ||
            ((window.console = {}),
            (window.console.log = function (t) {
              return t
            })),
          this.length || console.log('Animsition: Element does not exist on page.'),
          o || console.log('Animsition: Does not support this browser.'),
          i.destroy.call(this)
        )
      const e = i.optionCheck.call(this, a)
      return (
        e && t(`.${a.overlayClass}`).length <= 0 && i.addOverlay.call(this, a),
        a.loading && t(`.${a.loadingClass}`).length <= 0 && i.addLoading.call(this, a),
        this.each(function () {
          const o = this
          const e = t(this)
          const s = t(window)
          const r = t(document)
          const l = e.data(n)
          l ||
            ((a = t.extend({}, a)),
            e.data(n, { options: a }),
            a.timeout && i.addTimer.call(o),
            a.onLoadEvent &&
              s.on(`load.${n}`, function () {
                i.settings.timer && clearTimeout(i.settings.timer), i.in.call(o)
              }),
            s.on(`pageshow.${n}`, function (t) {
              t.originalEvent.persisted && i.in.call(o)
            }),
            s.on(`unload.${n}`, function () {}),
            r.on(`click.${n}`, a.linkElement, function (n) {
              n.preventDefault()
              const a = t(this)
              const e = a.attr('href')
              n.which === 2 ||
              n.metaKey ||
              n.shiftKey ||
              (navigator.platform.toUpperCase().indexOf('WIN') !== -1 && n.ctrlKey)
                ? window.open(e, '_blank')
                : i.out.call(o, a, e)
            }))
        })
      )
    },
    addOverlay(n) {
      t(n.overlayParentElement).prepend(`<div class="${n.overlayClass}"></div>`)
    },
    addLoading(n) {
      t(n.loadingParentElement).append(`<div class="${n.loadingClass}">${n.loadingInner}</div>`)
    },
    removeLoading() {
      const i = t(this)
      const a = i.data(n).options
      const o = t(a.loadingParentElement).children(`.${a.loadingClass}`)
      o.fadeOut().remove()
    },
    addTimer() {
      const a = this
      const o = t(this)
      const e = o.data(n).options
      i.settings.timer = setTimeout(function () {
        i.in.call(a), t(window).off(`load.${n}`)
      }, e.timeoutCountdown)
    },
    supportCheck(n) {
      const i = t(this)
      const a = n.browser
      const o = a.length
      let e = !1
      o === 0 && (e = !0)
      for (let s = 0; o > s; s++)
        if (typeof i.css(a[s]) === 'string') {
          e = !0
          break
        }
      return e
    },
    optionCheck(n) {
      let a
      const o = t(this)
      return (a = n.overlay || o.data(i.settings.data.overlay) ? !0 : !1)
    },
    animationCheck(i, a, o) {
      const e = t(this)
      const s = e.data(n).options
      const r = typeof i
      const l = !a && r === 'number'
      const d = a && r === 'string' && i.length > 0
      return (
        l || d
          ? (i = i)
          : a && o
          ? (i = s.inClass)
          : !a && o
          ? (i = s.inDuration)
          : a && !o
          ? (i = s.outClass)
          : a || o || (i = s.outDuration),
        i
      )
    },
    in() {
      const a = this
      const o = t(this)
      const e = o.data(n).options
      const s = o.data(i.settings.data.inDuration)
      const r = o.data(i.settings.data.inClass)
      const l = i.animationCheck.call(a, s, !1, !0)
      const d = i.animationCheck.call(a, r, !0, !0)
      const u = i.optionCheck.call(a, e)
      const c = o.data(n).outClass
      e.loading && i.removeLoading.call(a),
        c && o.removeClass(c),
        u ? i.inOverlay.call(a, d, l) : i.inDefault.call(a, d, l)
    },
    inDefault(n, a) {
      const o = t(this)
      o.css({ 'animation-duration': `${a}ms` })
        .addClass(n)
        .trigger(i.settings.events.inStart)
        .animateCallback(function () {
          o.removeClass(n).css({ opacity: 1 }).trigger(i.settings.events.inEnd)
        })
    },
    inOverlay(a, o) {
      const e = t(this)
      const s = e.data(n).options
      e.css({ opacity: 1 }).trigger(i.settings.events.inStart),
        t(s.overlayParentElement)
          .children(`.${s.overlayClass}`)
          .css({ 'animation-duration': `${o}ms` })
          .addClass(a)
          .animateCallback(function () {
            e.trigger(i.settings.events.inEnd)
          })
    },
    out(a, o) {
      const e = this
      const s = t(this)
      const r = s.data(n).options
      const l = a.data(i.settings.data.outClass)
      const d = s.data(i.settings.data.outClass)
      const u = a.data(i.settings.data.outDuration)
      const c = s.data(i.settings.data.outDuration)
      const m = l || d
      const g = u || c
      const f = i.animationCheck.call(e, m, !0, !1)
      const v = i.animationCheck.call(e, g, !1, !1)
      const h = i.optionCheck.call(e, r)
      ;(s.data(n).outClass = f), h ? i.outOverlay.call(e, f, v, o) : i.outDefault.call(e, f, v, o)
    },
    outDefault(a, o, e) {
      const s = t(this)
      const r = s.data(n).options
      s.css({ 'animation-duration': `${o + 1}ms` })
        .addClass(a)
        .trigger(i.settings.events.outStart)
        .animateCallback(function () {
          s.trigger(i.settings.events.outEnd), r.transition(e)
        })
    },
    outOverlay(a, o, e) {
      const s = this
      const r = t(this)
      const l = r.data(n).options
      const d = r.data(i.settings.data.inClass)
      const u = i.animationCheck.call(s, d, !0, !0)
      t(l.overlayParentElement)
        .children(`.${l.overlayClass}`)
        .css({ 'animation-duration': `${o + 1}ms` })
        .removeClass(u)
        .addClass(a)
        .trigger(i.settings.events.outStart)
        .animateCallback(function () {
          r.trigger(i.settings.events.outEnd), l.transition(e)
        })
    },
    destroy() {
      return this.each(function () {
        const i = t(this)
        t(window).off(`.${n}`), i.css({ opacity: 1 }).removeData(n)
      })
    },
  }
  ;(t.fn.animateCallback = function (n) {
    const i = 'animationend webkitAnimationEnd'
    return this.each(function () {
      const a = t(this)
      a.on(i, function () {
        return a.off(i), n.call(this)
      })
    })
  }),
    (t.fn.animsition = function (a) {
      return i[a]
        ? i[a].apply(this, Array.prototype.slice.call(arguments, 1))
        : typeof a !== 'object' && a
        ? void t.error(`Method ${a} does not exist on jQuery.${n}`)
        : i.init.apply(this, arguments)
    })
})
